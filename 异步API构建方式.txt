1. github下载https://github.com/MicrosoftArchive/redis.git （redis官方并不提供win的支持，redis-win版本由微软提供）
2. redis-3.0/msvs/RedisServer.sln 解决方案（使用vs2010以上）
3. 解决方案中仅hiredis和Win32_Interop项目是需要用到的。如果不使用异步API，仅hiredis就可以满足需要。
4. 在项目hiredis中
	a. 添加adlist.c,ae.c,zmalloc.c的引用，这些文件在redis-3.0\src目录下
	b. 项目属性 -> C/C++ -> 附加包含目录 -> $(SolutionDir)\src;

1~4步便构造了可用异步API的库hiredis.lib Win32_Interop.lib


*. 新建测试项目
	a. 项目属性 -> C/C++ -> 附加包含目录 -> $(SolutionDir)\src; $(SolutionDir)..\deps\hiredis
	b. 项目属性 -> 链接器 -> 附加库目录 -> $(SolutionDir)$(Platform)\$(Configuration)\
	c. 代码中使用
	#include <hiredis.h>

	#include <async.h>

	extern "C" {

		#include <adapters\ae.h>
	}
	#pragma comment(lib, "hiredis.lib")  
	#pragma comment(lib, "Win32_Interop.lib")

*. 可能性crash的地方
	//请不要在aeMain()返回前调用，也就是不要在事件循环前调用（官方代码一般在某个指令回调中调用也是不可行），会有可能crash
	//crash位置 async.c 370行 原因猜测是当一次性异步发送的指令过多，导致内部无法一次性发包，也无法一次性处理全部回调
	//所以在async.c 452行 仅判断输出缓冲区而不判断回调列表是否为空就disconnect会出现异常。
	//处理方案要么改async.c 452行的判断逻辑 要么就是限制redisAsyncDisconnect调用时机。
	redisAsyncDisconnect(ac);